{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","square","renderSquare","Component","Game","state","history","Array","fill","stepNumber","xIsNext","step","setState","slice","length","calculateWinner","concat","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","squares","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"0MAII,SAASA,EAAOC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACrCF,EAAMG,O,IAKfC,E,qLAESC,GAAI,IAAD,OACd,OACA,kBAACN,EAAD,CACEI,MAAOG,KAAKN,MAAMO,OAAOF,GACzBH,QAAS,kBAAI,EAAKF,MAAME,QAAQG,Q,+BAMlC,OACE,6BACE,yBAAKJ,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAErB,yBAAKP,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAErB,yBAAKP,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GA3BTC,aAkCdC,E,YACJ,WAAYV,GAAQ,IAAD,8BACjB,4CAAMA,KACDW,MAAO,CACVC,QAAS,CAAC,CACRL,OAAOM,MAAM,GAAGC,KAAK,QAEvBC,WAAY,EACZC,SAAQ,GAPO,E,oEAUZC,GACLX,KAAKY,SAAS,CACZH,WAAWE,EACXD,QAASC,EAAK,IAAI,M,kCAGVZ,GACV,IAAMO,EAAUN,KAAKK,MAAMC,QAAQO,MAAM,EAAEb,KAAKK,MAAMI,WAAW,GAE3DR,EADUK,EAAQA,EAAQQ,OAAO,GAChBb,OAAOY,QAC1BE,EAAgBd,IAAWA,EAAOF,KAGtCE,EAAOF,GAAKC,KAAKK,MAAMK,QAAU,IAAM,IACvCV,KAAKY,SAAS,CACZN,QAASA,EAAQU,OAAO,CAAC,CACvBf,OAAOA,KAETQ,WAAWH,EAAQQ,OACnBJ,SAASV,KAAKK,MAAMK,a,+BAGd,IAkBJO,EAlBG,OACDX,EAAUN,KAAKK,MAAMC,QACrBY,EAAUZ,EAAQN,KAAKK,MAAMI,YAC7BU,EAASJ,EAAgBG,EAAQjB,QAEjCmB,EAAQd,EAAQe,KAAI,SAACV,EAAKW,GAC9B,IAAMC,EAAOD,EACb,eAAiBA,EACjB,mBACA,OACE,wBAAIE,IAAKF,GACP,4BACA1B,QAAS,WAAM,EAAK6B,OAAOH,KAC5BC,OAYL,OALEN,EADEE,EACO,WAAWA,EAGX,iBAAiBnB,KAAKK,MAAMK,QAAU,IAAM,KAGrD,yBAAKf,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,CACEG,OAAQiB,EAAQjB,OAChBL,QAAS,SAACG,GAAK,EAAK2B,YAAY3B,OAGpC,yBAAKJ,UAAU,aACb,6BAAMsB,GACN,4BAAKG,S,GApEIjB,aA0EnB,SAASY,EAAgBY,GAWvB,IAVA,IAAMC,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA7B,EAAI,EAAGA,EAAI6B,EAAMd,OAAQf,IAAK,CAAC,IAAD,cACnB6B,EAAM7B,GADa,GAC9B8B,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIJ,EAAQE,IAAMF,EAAQE,KAAOF,EAAQG,IAAMH,EAAQE,KAAOF,EAAQI,GACpE,OAAOJ,EAAQE,GAGnB,OAAO,KAKTG,IAASC,OACP,kBAAC7B,EAAD,MACA8B,SAASC,eAAe,U","file":"static/js/main.a6484870.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n    function Square(props){\n        return(\n            <button className=\"square\" onClick={props.onClick}>\n                {props.value}\n            </button>\n        )\n    }\n  \n  class Board extends Component {\n\n    renderSquare(i) {\n      return ( \n      <Square \n        value={this.props.square[i]} \n        onClick={()=>this.props.onClick(i)}\n      />\n      );\n    }\n\n    render() {\n      return (\n        <div>\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  class Game extends Component {\n    constructor(props) {\n      super(props);\n      this.state ={\n        history :[{\n          square:Array(9).fill(null),\n        }],\n        stepNumber: 0,\n        xIsNext:true,\n      };\n    }\n    jumpTo(step) {\n      this.setState({\n        stepNumber:step,\n        xIsNext:(step%2===0),\n      });\n    }\n    handleClick(i) {\n      const history = this.state.history.slice(0,this.state.stepNumber+1);\n      const current = history[history.length-1];\n      const square = current.square.slice();\n      if (calculateWinner(square) || square[i]) {\n        return;\n      }\n      square[i] = this.state.xIsNext ? 'X' : 'O';\n      this.setState({\n        history: history.concat([{\n          square:square,\n        }]),\n        stepNumber:history.length,\n        xIsNext:!this.state.xIsNext,\n      })\n    }\n    render() {\n      const history = this.state.history;\n      const current = history[this.state.stepNumber];\n      const winner = calculateWinner(current.square);\n      \n      const moves = history.map((step,move) => {\n        const desc = move ?\n        'Go to move #' + move :\n        'Go to game Start';\n        return(\n          <li key={move}>\n            <button\n            onClick={() =>{this.jumpTo(move)}}>\n          {desc}\n            </button>\n          </li>\n        );\n      })\n      let status;\n      if (winner){\n        status = 'Winner: '+winner;\n      }\n      else {\n        status = 'Next player: '+(this.state.xIsNext ? 'X' : 'O');\n      }\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board \n              square={current.square}\n              onClick={(i)=>{this.handleClick(i)}}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <ol>{moves}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  "],"sourceRoot":""}